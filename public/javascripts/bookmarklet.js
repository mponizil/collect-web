// Generated by CoffeeScript 1.7.1
(function() {
  var Collectible, config, css, u;

  css = "#collect-wrap {\n  position: static;\n}\n#collect-wrap .image-candidate {\n  position: absolute;\n  z-index: 10000;\n  cursor: pointer;\n  border: 3px solid red;\n}\n#collect-wrap .image-candidate:hover {\n  background-color: rgba(255, 255, 255, 0.3);\n}";

  config = {
    BASE_URL: '<%= baseUrl %>' || 'http://localhost:3000'
  };

  u = {
    addClass: function(el, name) {
      return el.className += el.className.length ? " " + name : name;
    },
    removeClass: function(el, name) {
      return el.className = el.className.replace(new RegExp("\\s*" + name + "\\s*", 'g'), '');
    },
    on: function(el, eventName, callback) {
      return el.addEventListener(eventName, callback);
    },
    off: function(el, eventName, callback) {
      return el.removeEventListener(eventName, callback);
    },
    getOffset: function(el) {
      var left, top;
      left = 0;
      top = 0;
      while (el && el !== document.body) {
        if (isNaN(el.offsetLeft) || isNaN(el.offsetTop)) {
          continue;
        }
        left += el.offsetLeft - el.scrollLeft + el.clientLeft;
        top += el.offsetTop - el.scrollTop + el.clientTop;
        el = el.offsetParent;
      }
      return {
        left: left,
        top: top
      };
    }
  };

  Collectible = (function() {
    function Collectible() {}

    Collectible.prototype.initialize = function() {
      this.addCSS();
      this.makeContainer();
      this.highlightImages();
      return this;
    };

    Collectible.prototype.addCSS = function() {
      var styleElement, styleSheet;
      styleElement = document.createElement('style');
      document.getElementsByTagName('head')[0].appendChild(styleElement);
      styleSheet = document.createTextNode(css);
      return styleElement.appendChild(styleSheet);
    };

    Collectible.prototype.makeContainer = function() {
      this.containerEl = document.createElement('div');
      this.containerEl.id = 'collect-wrap';
      return document.getElementsByTagName('body')[0].appendChild(this.containerEl);
    };

    Collectible.prototype.highlightImages = function() {
      var image, _i, _len, _ref, _results;
      _ref = document.querySelectorAll('img');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        image = _ref[_i];
        if (image.offsetWidth > 100 && image.offsetHeight > 100) {
          _results.push(this.makeCollectible(image));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Collectible.prototype.makeCollectible = function(image) {
      var left, overlay, top, _ref;
      overlay = document.createElement('div');
      u.addClass(overlay, 'image-candidate');
      _ref = u.getOffset(image), left = _ref.left, top = _ref.top;
      overlay.style.left = "" + left + "px";
      overlay.style.top = "" + top + "px";
      overlay.style.width = "" + image.offsetWidth + "px";
      overlay.style.height = "" + image.offsetHeight + "px";
      u.on(overlay, 'click', (function(_this) {
        return function(e) {
          return (function(image) {
            return _this.chooseImage(image);
          })(image);
        };
      })(this));
      return this.containerEl.appendChild(overlay);
    };

    Collectible.prototype.chooseImage = function(image) {
      var e, item, key, popupParams, queryString, url, value;
      item = {
        image: image.src,
        title: document.title,
        price: this.getPrice(),
        hostname: location.hostname,
        url: location.href
      };
      popupParams = {
        width: 600,
        height: 415,
        scrollbars: 'no',
        toolbar: 'no',
        location: 'no',
        directories: 'no',
        status: 'no',
        menubar: 'no',
        resizable: 'no'
      };
      popupParams.left = window.screenLeft + (window.innerWidth - popupParams.width) * .5;
      popupParams.top = window.screenTop + (window.innerHeight - popupParams.height) * .4;
      e = encodeURIComponent;
      queryString = ((function() {
        var _results;
        _results = [];
        for (key in item) {
          value = item[key];
          _results.push("" + key + "=" + (e(value)));
        }
        return _results;
      })()).join('&');
      url = "" + config.BASE_URL + "/items/new?" + queryString;
      popupParams = ((function() {
        var _results;
        _results = [];
        for (key in popupParams) {
          value = popupParams[key];
          _results.push("" + key + "=" + value);
        }
        return _results;
      })()).join(',');
      return window.open(url, '_blank', popupParams);
    };

    Collectible.prototype.getPrice = function() {
      var count, html, match, matches, max, option, options, price, _i, _len;
      html = document.body.parentNode.outerHTML;
      matches = html.match(/\$?([,\d]+\.\d{2})/g);
      options = {};
      for (_i = 0, _len = matches.length; _i < _len; _i++) {
        match = matches[_i];
        match = match.replace(/[\$,]/g, '');
        if (options[match] == null) {
          options[match] = 0;
        }
        options[match] += 1;
      }
      price = 0;
      max = 0;
      for (option in options) {
        count = options[option];
        if (count > max) {
          max = count;
          price = option;
        }
      }
      return price;
    };

    return Collectible;

  })();

  (new Collectible).initialize();

}).call(this);
